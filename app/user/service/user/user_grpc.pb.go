// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: app/user/service/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_UserCreate_FullMethodName             = "/user.UserService/UserCreate"
	UserService_UserCreateRevertLogin_FullMethodName  = "/user.UserService/UserCreateRevertLogin"
	UserService_UserIsExists_FullMethodName           = "/user.UserService/UserIsExists"
	UserService_UserLogin_FullMethodName              = "/user.UserService/UserLogin"
	UserService_UserInfo_FullMethodName               = "/user.UserService/UserInfo"
	UserService_UserUpdateInfo_FullMethodName         = "/user.UserService/UserUpdateInfo"
	UserService_UserFlowed_FullMethodName             = "/user.UserService/UserFlowed"
	UserService_UserDisposeFlowed_FullMethodName      = "/user.UserService/UserDisposeFlowed"
	UserService_UserUpdateRemark_FullMethodName       = "/user.UserService/UserUpdateRemark"
	UserService_RecommendUsers_FullMethodName         = "/user.UserService/RecommendUsers"
	UserService_UserFriendList_FullMethodName         = "/user.UserService/UserFriendList"
	UserService_UserQueryFriend_FullMethodName        = "/user.UserService/UserQueryFriend"
	UserService_UserQueryPhone_FullMethodName         = "/user.UserService/UserQueryPhone"
	UserService_UserDeleteFriend_FullMethodName       = "/user.UserService/UserDeleteFriend"
	UserService_GetOffset_FullMethodName              = "/user.UserService/GetOffset"
	UserService_SetOffset_FullMethodName              = "/user.UserService/SetOffset"
	UserService_NextUserID_FullMethodName             = "/user.UserService/NextUserID"
	UserService_AddUserId_FullMethodName              = "/user.UserService/AddUserId"
	UserService_DecUserID_FullMethodName              = "/user.UserService/DecUserID"
	UserService_UserCreateGroup_FullMethodName        = "/user.UserService/UserCreateGroup"
	UserService_UserSelectGroup_FullMethodName        = "/user.UserService/UserSelectGroup"
	UserService_UserUserSelfGroup_FullMethodName      = "/user.UserService/UserUserSelfGroup"
	UserService_UserSelectDetailGroup_FullMethodName  = "/user.UserService/UserSelectDetailGroup"
	UserService_QuitGroup_FullMethodName              = "/user.UserService/QuitGroup"
	UserService_UserListByGroup_FullMethodName        = "/user.UserService/UserListByGroup"
	UserService_KickOutUserGroup_FullMethodName       = "/user.UserService/KickOutUserGroup"
	UserService_UpdateGroupInformation_FullMethodName = "/user.UserService/UpdateGroupInformation"
	UserService_UpdateGroupRemark_FullMethodName      = "/user.UserService/UpdateGroupRemark"
	UserService_QueryMyGroupList_FullMethodName       = "/user.UserService/QueryMyGroupList"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error)
	UserCreateRevertLogin(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error)
	UserIsExists(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*Empty, error)
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	UserUpdateInfo(ctx context.Context, in *UserUpdateInfoRequest, opts ...grpc.CallOption) (*Empty, error)
	// 好友
	UserFlowed(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*Empty, error)
	UserDisposeFlowed(ctx context.Context, in *DisposeFlowedRequest, opts ...grpc.CallOption) (*Empty, error)
	UserUpdateRemark(ctx context.Context, in *UserUpdateRemarkRequest, opts ...grpc.CallOption) (*Empty, error)
	RecommendUsers(ctx context.Context, in *RecommendUsersRequest, opts ...grpc.CallOption) (*RecommendUsersResponse, error)
	UserFriendList(ctx context.Context, in *UserFriendRequest, opts ...grpc.CallOption) (*UserFriendResponse, error)
	UserQueryFriend(ctx context.Context, in *UserQueryFriendRequest, opts ...grpc.CallOption) (*UserFriendResponse, error)
	UserQueryPhone(ctx context.Context, in *UserQueryPhoneRequest, opts ...grpc.CallOption) (*UserQueryPhoneResponse, error)
	UserDeleteFriend(ctx context.Context, in *UserDeleteFriendRequest, opts ...grpc.CallOption) (*Empty, error)
	// 偏移量
	GetOffset(ctx context.Context, in *GetOffsetRequest, opts ...grpc.CallOption) (*GetOffsetResponse, error)
	SetOffset(ctx context.Context, in *SetOffsetRequest, opts ...grpc.CallOption) (*Empty, error)
	// redis自增id
	NextUserID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NextUserIDResponse, error)
	AddUserId(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	DecUserID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 群聊
	UserCreateGroup(ctx context.Context, in *UserCreateGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	UserSelectGroup(ctx context.Context, in *UserSelectGroupsRequest, opts ...grpc.CallOption) (*UserSelectGroupsResponse, error)
	UserUserSelfGroup(ctx context.Context, in *UserSelfGroupRequest, opts ...grpc.CallOption) (*UserSelectGroupsResponse, error)
	UserSelectDetailGroup(ctx context.Context, in *DetailGroupRequest, opts ...grpc.CallOption) (*DetailGroupResponse, error)
	QuitGroup(ctx context.Context, in *QuitGroupRequest, opts ...grpc.CallOption) (*QuitGroupResponse, error)
	UserListByGroup(ctx context.Context, in *SelectUserListByGroupRequest, opts ...grpc.CallOption) (*SelectUserListByGroupResponse, error)
	KickOutUserGroup(ctx context.Context, in *KickOutUserGroupRequest, opts ...grpc.CallOption) (*KickOutUserGroupResponse, error)
	UpdateGroupInformation(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error)
	UpdateGroupRemark(ctx context.Context, in *UpdateGroupRemarkRequest, opts ...grpc.CallOption) (*UpdateGroupRemarkResponse, error)
	QueryMyGroupList(ctx context.Context, in *QueryMyGroupListRequest, opts ...grpc.CallOption) (*UserSelectGroupsResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error) {
	out := new(UserCreateResponse)
	err := c.cc.Invoke(ctx, UserService_UserCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserCreateRevertLogin(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error) {
	out := new(UserCreateResponse)
	err := c.cc.Invoke(ctx, UserService_UserCreateRevertLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserIsExists(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_UserIsExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, UserService_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, UserService_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserUpdateInfo(ctx context.Context, in *UserUpdateInfoRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_UserUpdateInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserFlowed(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_UserFlowed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserDisposeFlowed(ctx context.Context, in *DisposeFlowedRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_UserDisposeFlowed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserUpdateRemark(ctx context.Context, in *UserUpdateRemarkRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_UserUpdateRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RecommendUsers(ctx context.Context, in *RecommendUsersRequest, opts ...grpc.CallOption) (*RecommendUsersResponse, error) {
	out := new(RecommendUsersResponse)
	err := c.cc.Invoke(ctx, UserService_RecommendUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserFriendList(ctx context.Context, in *UserFriendRequest, opts ...grpc.CallOption) (*UserFriendResponse, error) {
	out := new(UserFriendResponse)
	err := c.cc.Invoke(ctx, UserService_UserFriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserQueryFriend(ctx context.Context, in *UserQueryFriendRequest, opts ...grpc.CallOption) (*UserFriendResponse, error) {
	out := new(UserFriendResponse)
	err := c.cc.Invoke(ctx, UserService_UserQueryFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserQueryPhone(ctx context.Context, in *UserQueryPhoneRequest, opts ...grpc.CallOption) (*UserQueryPhoneResponse, error) {
	out := new(UserQueryPhoneResponse)
	err := c.cc.Invoke(ctx, UserService_UserQueryPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserDeleteFriend(ctx context.Context, in *UserDeleteFriendRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_UserDeleteFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetOffset(ctx context.Context, in *GetOffsetRequest, opts ...grpc.CallOption) (*GetOffsetResponse, error) {
	out := new(GetOffsetResponse)
	err := c.cc.Invoke(ctx, UserService_GetOffset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetOffset(ctx context.Context, in *SetOffsetRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_SetOffset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) NextUserID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NextUserIDResponse, error) {
	out := new(NextUserIDResponse)
	err := c.cc.Invoke(ctx, UserService_NextUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUserId(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_AddUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DecUserID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_DecUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserCreateGroup(ctx context.Context, in *UserCreateGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_UserCreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserSelectGroup(ctx context.Context, in *UserSelectGroupsRequest, opts ...grpc.CallOption) (*UserSelectGroupsResponse, error) {
	out := new(UserSelectGroupsResponse)
	err := c.cc.Invoke(ctx, UserService_UserSelectGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserUserSelfGroup(ctx context.Context, in *UserSelfGroupRequest, opts ...grpc.CallOption) (*UserSelectGroupsResponse, error) {
	out := new(UserSelectGroupsResponse)
	err := c.cc.Invoke(ctx, UserService_UserUserSelfGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserSelectDetailGroup(ctx context.Context, in *DetailGroupRequest, opts ...grpc.CallOption) (*DetailGroupResponse, error) {
	out := new(DetailGroupResponse)
	err := c.cc.Invoke(ctx, UserService_UserSelectDetailGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QuitGroup(ctx context.Context, in *QuitGroupRequest, opts ...grpc.CallOption) (*QuitGroupResponse, error) {
	out := new(QuitGroupResponse)
	err := c.cc.Invoke(ctx, UserService_QuitGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserListByGroup(ctx context.Context, in *SelectUserListByGroupRequest, opts ...grpc.CallOption) (*SelectUserListByGroupResponse, error) {
	out := new(SelectUserListByGroupResponse)
	err := c.cc.Invoke(ctx, UserService_UserListByGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) KickOutUserGroup(ctx context.Context, in *KickOutUserGroupRequest, opts ...grpc.CallOption) (*KickOutUserGroupResponse, error) {
	out := new(KickOutUserGroupResponse)
	err := c.cc.Invoke(ctx, UserService_KickOutUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateGroupInformation(ctx context.Context, in *UpdateGroupInfoRequest, opts ...grpc.CallOption) (*UpdateGroupInfoResponse, error) {
	out := new(UpdateGroupInfoResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateGroupInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateGroupRemark(ctx context.Context, in *UpdateGroupRemarkRequest, opts ...grpc.CallOption) (*UpdateGroupRemarkResponse, error) {
	out := new(UpdateGroupRemarkResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateGroupRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryMyGroupList(ctx context.Context, in *QueryMyGroupListRequest, opts ...grpc.CallOption) (*UserSelectGroupsResponse, error) {
	out := new(UserSelectGroupsResponse)
	err := c.cc.Invoke(ctx, UserService_QueryMyGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	UserCreate(context.Context, *UserCreateRequest) (*UserCreateResponse, error)
	UserCreateRevertLogin(context.Context, *UserCreateRequest) (*UserCreateResponse, error)
	UserIsExists(context.Context, *UserCreateRequest) (*Empty, error)
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	UserUpdateInfo(context.Context, *UserUpdateInfoRequest) (*Empty, error)
	// 好友
	UserFlowed(context.Context, *UserAddRequest) (*Empty, error)
	UserDisposeFlowed(context.Context, *DisposeFlowedRequest) (*Empty, error)
	UserUpdateRemark(context.Context, *UserUpdateRemarkRequest) (*Empty, error)
	RecommendUsers(context.Context, *RecommendUsersRequest) (*RecommendUsersResponse, error)
	UserFriendList(context.Context, *UserFriendRequest) (*UserFriendResponse, error)
	UserQueryFriend(context.Context, *UserQueryFriendRequest) (*UserFriendResponse, error)
	UserQueryPhone(context.Context, *UserQueryPhoneRequest) (*UserQueryPhoneResponse, error)
	UserDeleteFriend(context.Context, *UserDeleteFriendRequest) (*Empty, error)
	// 偏移量
	GetOffset(context.Context, *GetOffsetRequest) (*GetOffsetResponse, error)
	SetOffset(context.Context, *SetOffsetRequest) (*Empty, error)
	// redis自增id
	NextUserID(context.Context, *Empty) (*NextUserIDResponse, error)
	AddUserId(context.Context, *Empty) (*Empty, error)
	DecUserID(context.Context, *Empty) (*Empty, error)
	// 群聊
	UserCreateGroup(context.Context, *UserCreateGroupRequest) (*Empty, error)
	UserSelectGroup(context.Context, *UserSelectGroupsRequest) (*UserSelectGroupsResponse, error)
	UserUserSelfGroup(context.Context, *UserSelfGroupRequest) (*UserSelectGroupsResponse, error)
	UserSelectDetailGroup(context.Context, *DetailGroupRequest) (*DetailGroupResponse, error)
	QuitGroup(context.Context, *QuitGroupRequest) (*QuitGroupResponse, error)
	UserListByGroup(context.Context, *SelectUserListByGroupRequest) (*SelectUserListByGroupResponse, error)
	KickOutUserGroup(context.Context, *KickOutUserGroupRequest) (*KickOutUserGroupResponse, error)
	UpdateGroupInformation(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error)
	UpdateGroupRemark(context.Context, *UpdateGroupRemarkRequest) (*UpdateGroupRemarkResponse, error)
	QueryMyGroupList(context.Context, *QueryMyGroupListRequest) (*UserSelectGroupsResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UserCreate(context.Context, *UserCreateRequest) (*UserCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedUserServiceServer) UserCreateRevertLogin(context.Context, *UserCreateRequest) (*UserCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreateRevertLogin not implemented")
}
func (UnimplementedUserServiceServer) UserIsExists(context.Context, *UserCreateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIsExists not implemented")
}
func (UnimplementedUserServiceServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServiceServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserServiceServer) UserUpdateInfo(context.Context, *UserUpdateInfoRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateInfo not implemented")
}
func (UnimplementedUserServiceServer) UserFlowed(context.Context, *UserAddRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFlowed not implemented")
}
func (UnimplementedUserServiceServer) UserDisposeFlowed(context.Context, *DisposeFlowedRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDisposeFlowed not implemented")
}
func (UnimplementedUserServiceServer) UserUpdateRemark(context.Context, *UserUpdateRemarkRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateRemark not implemented")
}
func (UnimplementedUserServiceServer) RecommendUsers(context.Context, *RecommendUsersRequest) (*RecommendUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendUsers not implemented")
}
func (UnimplementedUserServiceServer) UserFriendList(context.Context, *UserFriendRequest) (*UserFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFriendList not implemented")
}
func (UnimplementedUserServiceServer) UserQueryFriend(context.Context, *UserQueryFriendRequest) (*UserFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserQueryFriend not implemented")
}
func (UnimplementedUserServiceServer) UserQueryPhone(context.Context, *UserQueryPhoneRequest) (*UserQueryPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserQueryPhone not implemented")
}
func (UnimplementedUserServiceServer) UserDeleteFriend(context.Context, *UserDeleteFriendRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteFriend not implemented")
}
func (UnimplementedUserServiceServer) GetOffset(context.Context, *GetOffsetRequest) (*GetOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffset not implemented")
}
func (UnimplementedUserServiceServer) SetOffset(context.Context, *SetOffsetRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOffset not implemented")
}
func (UnimplementedUserServiceServer) NextUserID(context.Context, *Empty) (*NextUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextUserID not implemented")
}
func (UnimplementedUserServiceServer) AddUserId(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserId not implemented")
}
func (UnimplementedUserServiceServer) DecUserID(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecUserID not implemented")
}
func (UnimplementedUserServiceServer) UserCreateGroup(context.Context, *UserCreateGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreateGroup not implemented")
}
func (UnimplementedUserServiceServer) UserSelectGroup(context.Context, *UserSelectGroupsRequest) (*UserSelectGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSelectGroup not implemented")
}
func (UnimplementedUserServiceServer) UserUserSelfGroup(context.Context, *UserSelfGroupRequest) (*UserSelectGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUserSelfGroup not implemented")
}
func (UnimplementedUserServiceServer) UserSelectDetailGroup(context.Context, *DetailGroupRequest) (*DetailGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSelectDetailGroup not implemented")
}
func (UnimplementedUserServiceServer) QuitGroup(context.Context, *QuitGroupRequest) (*QuitGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitGroup not implemented")
}
func (UnimplementedUserServiceServer) UserListByGroup(context.Context, *SelectUserListByGroupRequest) (*SelectUserListByGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserListByGroup not implemented")
}
func (UnimplementedUserServiceServer) KickOutUserGroup(context.Context, *KickOutUserGroupRequest) (*KickOutUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickOutUserGroup not implemented")
}
func (UnimplementedUserServiceServer) UpdateGroupInformation(context.Context, *UpdateGroupInfoRequest) (*UpdateGroupInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupInformation not implemented")
}
func (UnimplementedUserServiceServer) UpdateGroupRemark(context.Context, *UpdateGroupRemarkRequest) (*UpdateGroupRemarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupRemark not implemented")
}
func (UnimplementedUserServiceServer) QueryMyGroupList(context.Context, *QueryMyGroupListRequest) (*UserSelectGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMyGroupList not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCreate(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserCreateRevertLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCreateRevertLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserCreateRevertLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCreateRevertLogin(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserIsExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserIsExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserIsExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserIsExists(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserUpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserUpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserUpdateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserUpdateInfo(ctx, req.(*UserUpdateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserFlowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserFlowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserFlowed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserFlowed(ctx, req.(*UserAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserDisposeFlowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisposeFlowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserDisposeFlowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserDisposeFlowed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserDisposeFlowed(ctx, req.(*DisposeFlowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserUpdateRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserUpdateRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserUpdateRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserUpdateRemark(ctx, req.(*UserUpdateRemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RecommendUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RecommendUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RecommendUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RecommendUsers(ctx, req.(*RecommendUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserFriendList(ctx, req.(*UserFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserQueryFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserQueryFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserQueryFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserQueryFriend(ctx, req.(*UserQueryFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserQueryPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserQueryPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserQueryPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserQueryPhone(ctx, req.(*UserQueryPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserDeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserDeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserDeleteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserDeleteFriend(ctx, req.(*UserDeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetOffset(ctx, req.(*GetOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetOffset(ctx, req.(*SetOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_NextUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).NextUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_NextUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).NextUserID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserId(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DecUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DecUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DecUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DecUserID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserCreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserCreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCreateGroup(ctx, req.(*UserCreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserSelectGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSelectGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserSelectGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserSelectGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserSelectGroup(ctx, req.(*UserSelectGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserUserSelfGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSelfGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserUserSelfGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserUserSelfGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserUserSelfGroup(ctx, req.(*UserSelfGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserSelectDetailGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserSelectDetailGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserSelectDetailGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserSelectDetailGroup(ctx, req.(*DetailGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QuitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QuitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_QuitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QuitGroup(ctx, req.(*QuitGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserListByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectUserListByGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserListByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserListByGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserListByGroup(ctx, req.(*SelectUserListByGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_KickOutUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickOutUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).KickOutUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_KickOutUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).KickOutUserGroup(ctx, req.(*KickOutUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateGroupInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateGroupInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateGroupInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateGroupInformation(ctx, req.(*UpdateGroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateGroupRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateGroupRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateGroupRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateGroupRemark(ctx, req.(*UpdateGroupRemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryMyGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMyGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryMyGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_QueryMyGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryMyGroupList(ctx, req.(*QueryMyGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreate",
			Handler:    _UserService_UserCreate_Handler,
		},
		{
			MethodName: "UserCreateRevertLogin",
			Handler:    _UserService_UserCreateRevertLogin_Handler,
		},
		{
			MethodName: "UserIsExists",
			Handler:    _UserService_UserIsExists_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserService_UserLogin_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _UserService_UserInfo_Handler,
		},
		{
			MethodName: "UserUpdateInfo",
			Handler:    _UserService_UserUpdateInfo_Handler,
		},
		{
			MethodName: "UserFlowed",
			Handler:    _UserService_UserFlowed_Handler,
		},
		{
			MethodName: "UserDisposeFlowed",
			Handler:    _UserService_UserDisposeFlowed_Handler,
		},
		{
			MethodName: "UserUpdateRemark",
			Handler:    _UserService_UserUpdateRemark_Handler,
		},
		{
			MethodName: "RecommendUsers",
			Handler:    _UserService_RecommendUsers_Handler,
		},
		{
			MethodName: "UserFriendList",
			Handler:    _UserService_UserFriendList_Handler,
		},
		{
			MethodName: "UserQueryFriend",
			Handler:    _UserService_UserQueryFriend_Handler,
		},
		{
			MethodName: "UserQueryPhone",
			Handler:    _UserService_UserQueryPhone_Handler,
		},
		{
			MethodName: "UserDeleteFriend",
			Handler:    _UserService_UserDeleteFriend_Handler,
		},
		{
			MethodName: "GetOffset",
			Handler:    _UserService_GetOffset_Handler,
		},
		{
			MethodName: "SetOffset",
			Handler:    _UserService_SetOffset_Handler,
		},
		{
			MethodName: "NextUserID",
			Handler:    _UserService_NextUserID_Handler,
		},
		{
			MethodName: "AddUserId",
			Handler:    _UserService_AddUserId_Handler,
		},
		{
			MethodName: "DecUserID",
			Handler:    _UserService_DecUserID_Handler,
		},
		{
			MethodName: "UserCreateGroup",
			Handler:    _UserService_UserCreateGroup_Handler,
		},
		{
			MethodName: "UserSelectGroup",
			Handler:    _UserService_UserSelectGroup_Handler,
		},
		{
			MethodName: "UserUserSelfGroup",
			Handler:    _UserService_UserUserSelfGroup_Handler,
		},
		{
			MethodName: "UserSelectDetailGroup",
			Handler:    _UserService_UserSelectDetailGroup_Handler,
		},
		{
			MethodName: "QuitGroup",
			Handler:    _UserService_QuitGroup_Handler,
		},
		{
			MethodName: "UserListByGroup",
			Handler:    _UserService_UserListByGroup_Handler,
		},
		{
			MethodName: "KickOutUserGroup",
			Handler:    _UserService_KickOutUserGroup_Handler,
		},
		{
			MethodName: "UpdateGroupInformation",
			Handler:    _UserService_UpdateGroupInformation_Handler,
		},
		{
			MethodName: "UpdateGroupRemark",
			Handler:    _UserService_UpdateGroupRemark_Handler,
		},
		{
			MethodName: "QueryMyGroupList",
			Handler:    _UserService_QueryMyGroupList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/user/service/user.proto",
}
