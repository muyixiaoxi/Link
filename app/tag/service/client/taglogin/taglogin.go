// Code generated by goctl. DO NOT EDIT.
// Source: tag.proto

package taglogin

import (
	"context"

	"tag/service/tag"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AllTags                    = tag.AllTags
	AllTagsByGroupNameResponse = tag.AllTagsByGroupNameResponse
	CancelRequest              = tag.CancelRequest
	CheckTagCountRequest       = tag.CheckTagCountRequest
	CheckTagCountResponse      = tag.CheckTagCountResponse
	ChooseTagsRequest          = tag.ChooseTagsRequest
	ChooseTagsResponse         = tag.ChooseTagsResponse
	CreateTagRequest           = tag.CreateTagRequest
	CreateTagResponse          = tag.CreateTagResponse
	CreateTagResponse_LowTags  = tag.CreateTagResponse_LowTags
	DeleteTagRequest           = tag.DeleteTagRequest
	DeleteTagResponse          = tag.DeleteTagResponse
	Empty                      = tag.Empty
	GroupTag                   = tag.GroupTag
	GroupTagResponse           = tag.GroupTagResponse
	SelectAllTagsByGroupName   = tag.SelectAllTagsByGroupName
	SelectLinkTag              = tag.SelectLinkTag
	SelectLinkTagMid           = tag.SelectLinkTagMid
	SelectLinkTagsRequest      = tag.SelectLinkTagsRequest
	SelectLinkTagsResponse     = tag.SelectLinkTagsResponse
	SelectMyTagsRequest        = tag.SelectMyTagsRequest
	UserChooseTagRequest       = tag.UserChooseTagRequest

	TagLogin interface {
		CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
		UpdateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
		DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
		SelectGroupTag(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GroupTagResponse, error)
		SelectAllTagsByGroup(ctx context.Context, in *SelectAllTagsByGroupName, opts ...grpc.CallOption) (*AllTagsByGroupNameResponse, error)
		ChooseTags(ctx context.Context, in *ChooseTagsRequest, opts ...grpc.CallOption) (*ChooseTagsResponse, error)
		SelectLinkTags(ctx context.Context, in *SelectLinkTagsRequest, opts ...grpc.CallOption) (*SelectLinkTagsResponse, error)
		SelectMyTags(ctx context.Context, in *SelectMyTagsRequest, opts ...grpc.CallOption) (*AllTagsByGroupNameResponse, error)
		CheckTagCount(ctx context.Context, in *CheckTagCountRequest, opts ...grpc.CallOption) (*CheckTagCountResponse, error)
		CancelUserTag(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultTagLogin struct {
		cli zrpc.Client
	}
)

func NewTagLogin(cli zrpc.Client) TagLogin {
	return &defaultTagLogin{
		cli: cli,
	}
}

func (m *defaultTagLogin) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	client := tag.NewTagLoginClient(m.cli.Conn())
	return client.CreateTag(ctx, in, opts...)
}

func (m *defaultTagLogin) UpdateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	client := tag.NewTagLoginClient(m.cli.Conn())
	return client.UpdateTag(ctx, in, opts...)
}

func (m *defaultTagLogin) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	client := tag.NewTagLoginClient(m.cli.Conn())
	return client.DeleteTag(ctx, in, opts...)
}

func (m *defaultTagLogin) SelectGroupTag(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GroupTagResponse, error) {
	client := tag.NewTagLoginClient(m.cli.Conn())
	return client.SelectGroupTag(ctx, in, opts...)
}

func (m *defaultTagLogin) SelectAllTagsByGroup(ctx context.Context, in *SelectAllTagsByGroupName, opts ...grpc.CallOption) (*AllTagsByGroupNameResponse, error) {
	client := tag.NewTagLoginClient(m.cli.Conn())
	return client.SelectAllTagsByGroup(ctx, in, opts...)
}

func (m *defaultTagLogin) ChooseTags(ctx context.Context, in *ChooseTagsRequest, opts ...grpc.CallOption) (*ChooseTagsResponse, error) {
	client := tag.NewTagLoginClient(m.cli.Conn())
	return client.ChooseTags(ctx, in, opts...)
}

func (m *defaultTagLogin) SelectLinkTags(ctx context.Context, in *SelectLinkTagsRequest, opts ...grpc.CallOption) (*SelectLinkTagsResponse, error) {
	client := tag.NewTagLoginClient(m.cli.Conn())
	return client.SelectLinkTags(ctx, in, opts...)
}

func (m *defaultTagLogin) SelectMyTags(ctx context.Context, in *SelectMyTagsRequest, opts ...grpc.CallOption) (*AllTagsByGroupNameResponse, error) {
	client := tag.NewTagLoginClient(m.cli.Conn())
	return client.SelectMyTags(ctx, in, opts...)
}

func (m *defaultTagLogin) CheckTagCount(ctx context.Context, in *CheckTagCountRequest, opts ...grpc.CallOption) (*CheckTagCountResponse, error) {
	client := tag.NewTagLoginClient(m.cli.Conn())
	return client.CheckTagCount(ctx, in, opts...)
}

func (m *defaultTagLogin) CancelUserTag(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := tag.NewTagLoginClient(m.cli.Conn())
	return client.CancelUserTag(ctx, in, opts...)
}
