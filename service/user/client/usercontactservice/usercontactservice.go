// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package usercontactservice

import (
	"context"

	"Link/service/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty                   = user.Empty
	UserAddRequest          = user.UserAddRequest
	UserCreateGroupRequest  = user.UserCreateGroupRequest
	UserCreateRequest       = user.UserCreateRequest
	UserCreateResponse      = user.UserCreateResponse
	UserInfoRequest         = user.UserInfoRequest
	UserInfoResponse        = user.UserInfoResponse
	UserLoginRequest        = user.UserLoginRequest
	UserLoginResponse       = user.UserLoginResponse
	UserUpdateInfoRequest   = user.UserUpdateInfoRequest
	UserUpdateRemarkRequest = user.UserUpdateRemarkRequest

	UserContactService interface {
		UserFlowed(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*Empty, error)
		UserUpdateRemark(ctx context.Context, in *UserUpdateRemarkRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultUserContactService struct {
		cli zrpc.Client
	}
)

func NewUserContactService(cli zrpc.Client) UserContactService {
	return &defaultUserContactService{
		cli: cli,
	}
}

func (m *defaultUserContactService) UserFlowed(ctx context.Context, in *UserAddRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserContactServiceClient(m.cli.Conn())
	return client.UserFlowed(ctx, in, opts...)
}

func (m *defaultUserContactService) UserUpdateRemark(ctx context.Context, in *UserUpdateRemarkRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserContactServiceClient(m.cli.Conn())
	return client.UserUpdateRemark(ctx, in, opts...)
}
